#!/bin/sh
. /usr/share/os-prober/common.sh

set -e

newns "$@"
require_tmpdir

print_mounted_devices | parse_proc_mounts >"$OS_PROBER_TMP/mounted-map" || true

partition="$1"

if [ -z "$partition" ]; then
    echo "usage: linux-boot-prober partition" >&2
    exit 1
fi

mapped="$(mapdevfs "$partition")"
if [ ! -e "$mapped" ]; then
    log "Device '$partition' does not exist; skipping"
    exit 1
fi

need_unmount=0
if ! grep -q "^$mapped " "$OS_PROBER_TMP/mounted-map"; then
    mpoint=$(mktemp -d)
    debug "mounting $partition on $mpoint"
    if ! grub-mount "$partition" "$mpoint"; then
        debug "failed to mount $partition; skipping"
        rmdir "$mpoint"
        exit 1
    fi
    grep "^/dev/" /proc/mounts | parse_proc_mounts >"$OS_PROBER_TMP/mounted-map" || true
    need_unmount=1
else
    mpoint=$(grep "^$mapped " "$OS_PROBER_TMP/mounted-map" | head -n1 | cut -d " " -f 2)
    mpoint="$(unescape_mount "$mpoint")"
fi

if [ true ]; then
    if [ "$mpoint" != "/target/boot" ] && [ "$mpoint" != "/target" ] && [ "$mpoint" != "/" ]; then
        type=$(grep "^$mapped " "$OS_PROBER_TMP/mounted-map" | head -n1 | cut -d " " -f 3)
        if ! grep -q " $mpoint/boot " "$OS_PROBER_TMP/mounted-map"; then
            linux_mount_boot "$partition" "$mpoint"
            bootpart="${mountboot%% *}"
            bootmounted="${mountboot#* }"
        else
            bootpart="$partition"
            bootmounted=0
        fi
        for test in $(find /usr/lib/probes/linux-boot/mounted -type f); do
            if [ -x $test ]; then
                debug "running $test on mounted $partition"
                if $test "$partition" "$bootpart" "$mpoint" "$type"; then
                    debug "$test succeeded"
                    break
                fi
            fi
        done
        if [ "$bootmounted" = 1 ]; then
            if ! umount "$mpoint/boot"; then
                warn "failed to umount $mpoint/boot"
            fi
        fi
    fi
fi

if [ $need_unmount = 1 ]; then
    debug "unmounting $mpoint"
    if ! umount "$mpoint"; then
        warn "failed to unmount $mpoint"
    fi
    rmdir "$mpoint"
fi
